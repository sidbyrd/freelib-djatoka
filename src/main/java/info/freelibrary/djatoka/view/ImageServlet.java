
package info.freelibrary.djatoka.view;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import gov.lanl.adore.djatoka.openurl.OpenURLJP2KService;
import info.freelibrary.djatoka.Constants;
import info.freelibrary.djatoka.iiif.*;
import info.freelibrary.djatoka.util.CacheUtils;
import info.freelibrary.djatoka.util.URLEncode;
import info.freelibrary.util.*;
import nu.xom.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.*;

public class ImageServlet extends HttpServlet implements Constants {

    /**
     * The <code>ImageServlet</code>'s <code>serialVersionUID</code>.
     */
    private static final long serialVersionUID = -4142816720756238591L;

    private static final Logger LOGGER = LoggerFactory.getLogger(ImageServlet.class);

    private static final ObjectMapper MAPPER = new ObjectMapper();

    private static final String RESOLVE_METADATA_QUERY =
            "?url_ver=Z39.88-2004&rft_id={}&svc_id=info:lanl-repo/svc/getMetadata";

    private static final String RESOLVE_IMAGE_QUERY = "?url_ver=Z39.88-2004&rft_id={}"
            + "&svc_id=info:lanl-repo/svc/getRegion" + "&svc_val_fmt=info:ofi/fmt:kev:mtx:jpeg2000"
            + "&svc.format={}&svc.level={}&svc.rotate={}&svc.region={}";

    private static final String RESOLVE_REGION_QUERY = "?url_ver=Z39.88-2004&rft_id={}"
            + "&svc_id=info:lanl-repo/svc/getRegion" + "&svc_val_fmt=info:ofi/fmt:kev:mtx:jpeg2000"
            + "&svc.format={}&svc.region={}&svc.scale={}&svc.rotate={}";

    private static final String XML_TEMPLATE = "/WEB-INF/metadata.xml";

    /**
     * Max dimension of generated tiles.
     * This should really be a config property, but it's already hardcoded in like a million places.
     * Also, I can't even import this const from anywhere else because it doesn't exist. Unbelievable!
     */
    private static final int TILE_SIZE = 256;
    private static final int TILE_LOG2 = log2(TILE_SIZE); // == 8

    /**
     * PairTree tile cache, where we move tiles generated by Djatoka from its temp cache dir
     */
    private PairtreeRoot tileCache = null;

    /**
     * a locally accessible URL to the root of the server this webapp is running on
     * optional: leave null to just use the same URL that externally connecting clients use.
     * Useful if e.g. externally visible on https://server.com, but internally also at http://localhost:8080
     * */
    private String internalServer = null;

    /**
     * Set to return error if served an option or property setting that I have
     * noticed OpenSeaDragon never uses. Can help keep possible accepted parameters finite.
     * */
    private boolean requireOsdStyle = true;

    /**
     * Set to require region and scaling settings to align on power-of-two boundaries corresponding
     * to the zoom level desired (and legal for the requested image). Dispatches djatoka request
     * using the svc.level option for faster and higher quality results, and returns an error to
     * any requests for region+scale that doesn't align properly with zoom levels. Compatible with
     * OpenSeaDragon. Reduces possible space of parameters to something finite (and pre-generatable).
     */
    private boolean requireLevels = true;

    /**
     * JP2 images has a certain number of zoom settings encoded in them. If requireLevels==true, set
     * this to allow requests for images zoomed farther out than level 1, which is the normal minimum.
     */
    private int minZoomLevel = 1;

    /** path this whole webapp is at, relative to server root */
    private String contextPath = null;

    /** path the resolver servlet is at, relative to contextPath */
    private String resolverPath = null;

    /** recently accessed Height, Width, and Level lookups, keyed by identifier */
    private Map<String, int[]> recentHWL = null;
    private static final int RECENT_HWL_SIZE = 500;

    /**
     * Recently accessed tile filenames, keyed by URL
     * value is pair of HTTP status code and filename (or error message if code != SC_OK)
     * Unlike external response caching, this doesn't have to store the entire file contents.
     * May safely be left null if you don't want to use caching here.
     */
    private Map<String, Map.Entry<Integer, String>> recentTiles = null;
    private static final int RECENT_TILES_SIZE = 50000;

    /** for logging */
    private static final DecimalFormat df = new DecimalFormat("######.00000");


    @Override
    public void init() throws ServletException {
        final InputStream is = getClass().getResourceAsStream("/" + PROPERTIES_FILE);
        if (is != null) {
            final Properties props = new Properties();
            try {
                props.loadFromXML(is);
            } catch (final IOException details) {
                if (LOGGER.isWarnEnabled()) {
                    LOGGER.warn("Unable to load properties file: {}", details.getMessage());
                }
            } finally {
                IOUtils.closeQuietly(is);
            }

            // cache dir
            String cacheDir;
            if (props.containsKey(VIEW_CACHE_DIR)) {
                cacheDir = props.getProperty(VIEW_CACHE_DIR);
            } else {
                // If we couldn't get cache from config, fall back to tmpdir
                cacheDir = System.getProperty("java.io.tmpdir");
            }
            try {
                tileCache = new PairtreeRoot(cacheDir);
            } catch (IOException details) {
                // properly configured cache is mandatory
                LOGGER.error("Unable to load tile cache directory: {}", details.getMessage());
                throw new ServletException(details.getMessage());
            }

            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("Cache directory set to {}", cacheDir);
            }

            // general properties
            if (props.containsKey(INTERNAL_SERVER)) {
                // refer to this server at a pre-configured internal URL, e.g. http://localhost:8080
                internalServer = props.getProperty(INTERNAL_SERVER);
            }

            if (props.containsKey(REQUIRE_OSD_STYLE)) {
                requireOsdStyle = props.getProperty(REQUIRE_OSD_STYLE).equals("true");
            }
            if (props.containsKey(REQUIRE_LEVELS)) {
                requireLevels = props.getProperty(REQUIRE_LEVELS).equals("true");
            }
            if (props.containsKey(REQUIRE_LEVELS_MIN)) {
                try {
                    minZoomLevel = Integer.parseInt(props.getProperty(REQUIRE_LEVELS_MIN));
                } catch (NumberFormatException e) {
                    LOGGER.warn("Property "+REQUIRE_LEVELS_MIN+" was not a number; using "+ minZoomLevel +" instead");
                }
                if (minZoomLevel > 1) {
                    LOGGER.warn("Property "+REQUIRE_LEVELS_MIN+"="+minZoomLevel+" was clipped to a max of 1");
                    minZoomLevel = 1;
                }
            }
        }

        // get the base URL that this whole webapp is server at (relative to server root)
        contextPath = getServletContext().getContextPath();
        LOGGER.debug("IIIF servlet using context path of {}", contextPath);

        // get the (first) URL that the servlet named "resolver" (in web.xml) is served at, relative to contextPath
        try {
            resolverPath = getServletContext().getServletRegistration("resolver").getMappings().iterator().next();
        } catch (UnsupportedOperationException e) {
            LOGGER.error("Unable to get servlet registration for 'resolver': {}", e.getMessage());
        } catch (NoSuchElementException e) {
            LOGGER.error("No registrations found for servlet 'resolver': {}", e.getMessage());
        }
        if (resolverPath == null) {
            // didn't work? Maybe we can fake something.
            resolverPath = "/resolver";
        }
        LOGGER.debug("IIIF servlet using resolver URL of {}", resolverPath);

        // init lookup LRU caches for oft-repeated calculations
        recentHWL = Collections.synchronizedMap(new LruCache<String, int[]>(RECENT_HWL_SIZE));
        recentTiles = Collections.synchronizedMap(new LruCache<String, Map.Entry<Integer, String>>(RECENT_TILES_SIZE));
    }

    /**
     * Serves from a filename or prepared error message and caches its pair input in recentTiles
     * @param pair key:   HTTP response code
     *             value: if code==200: the file path of a JPG file to serve. Must exist!
     *                    if code!=200: message text to display on error page
     * @param aRequest the request being served
     * @param aResponse the response to serve
     * @throws IOException if serving response
     */
    private void serveAndCache(Map.Entry<Integer, String> pair,
                                      HttpServletRequest aRequest, HttpServletResponse aResponse) throws IOException {
        if (pair.getKey().equals(HttpServletResponse.SC_OK)) {
            try {
                serveJpgFile(pair.getValue(), aResponse);
            } catch (HttpErrorException e) {
                LOGGER.warn("couldn't serve file "+pair.getValue()+" : "+e.getMessage());
                aResponse.sendError(pair.getKey(), pair.getValue());
            }
        } else {
            aResponse.sendError(pair.getKey(), pair.getValue());
        }
        if (recentTiles != null) {
            recentTiles.put(aRequest.getRequestURI(), pair);
        }
    }

    /**
     * Handles both main types of IIIF requests: InfoRequests (for image metadata), and
     * ImageRequest (for tiles of image content).
     * Internally, it validates a bunch of stuff, transforms the request, forwards it
     * to the Djatoka resolver for fulfillment, caches the returned files and metadata,
     * and further caches the filenames (and error responses) so it doesn't have to
     * re-validate and re-transform the requests every time.
     * @param aRequest request for IIIF service
     * @param aResponse our response
     * @throws IOException if cannot send to aResponse. Other errors are written to aResponse
     * as HTTP error pages (and perhaps also logged).
     */
    @Override
    protected void doGet(final HttpServletRequest aRequest, final HttpServletResponse aResponse)
            throws IOException {
        if (internalServer == null) {
            // This needs to be *any* valid way to address this server.
            // If the admin cared which, they would have set the INTERNAL_SERVER config property.
            // We only need to set this static variable once, but we don't have the info yet
            //  at config time, so do it now.
            internalServer = getServer(aRequest);
        }

        final IIIFRequest iiif = (IIIFRequest) aRequest.getAttribute(IIIFRequest.KEY);

	    if (iiif == null) {
            aResponse.sendError(HttpServletResponse.SC_BAD_REQUEST, "IIIF format required");
            return;
	    }
        final String id = iiif.getIdentifier();
        if (id==null) {
            aResponse.sendError(HttpServletResponse.SC_BAD_REQUEST, "identifier required");
            return;
        }

        // see if we already have a cached response
        final String uri=aRequest.getRequestURI();
        Map.Entry<Integer, String> response = (recentTiles==null)?null : recentTiles.get(uri);

        if (response != null) {
            // serve the cached file or error again, with lots less mucking about with strings and math
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("serving cached response with code {}",response.getKey());
            }
            serveAndCache(response, aRequest, aResponse);
        } else {
            try {
                if (iiif instanceof InfoRequest) {
                    doInfoRequest((InfoRequest)iiif, aRequest, aResponse);
                } else if (iiif instanceof ImageRequest) {
                    doImageRequest((ImageRequest)iiif, aRequest, aResponse);
                } else {
                    aResponse.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, "unrecognized IIIF message type");
                }
            } catch (HttpErrorException re) {
                // send any error messages
                serveAndCache(re.getPair(), aRequest, aResponse);
                // log the error if appropriate
                if (LOGGER.isWarnEnabled()) {
                    final boolean isWarn = re.getCode() >= 500; // actual error, not just "not found" or something
                    if (isWarn || LOGGER.isDebugEnabled()) {
                        StringBuilder message = new StringBuilder().append("error ").append(re.getCode())
                                .append(": ").append(re.getMessage());
                        if (re.getCause() != null) {
                            message=message.append(" from ").append(re.getCause());
                        }
                        if (isWarn) {
                            LOGGER.warn(message.toString());
                        } else {
                            LOGGER.debug(message.toString());
                        }
                    }
                }
            }
        }
    }

    /*
     * We cannot generate this efficiently if we want to conform to HTTP spec and
     * have the headers be exactly the same as a real GET request.
     * Fortunately, this method is never called in practice using OpenSeaDragon.
     * */
    @Override
    protected void doHead(final HttpServletRequest aRequest, final HttpServletResponse aResponse)
            throws ServletException, IOException {
        if (internalServer == null) {
            internalServer = getServer(aRequest);
        }
        super.doHead(aRequest, aResponse);
    }

    @Override
    protected long getLastModified(final HttpServletRequest aRequest) {
        // TODO: really implement this using our cached files?
        return super.getLastModified(aRequest);
    }

    /**
     * Serves an IIIF image info request
     * @param iiif parsed parameters of the request
     * @param aRequest HTTP request being fulfilled
     * @param aResponse HTTP response to serve out on
     * @throws HttpErrorException if formatting metadata or copying metadata
     */
    protected void doInfoRequest(final InfoRequest iiif, final HttpServletRequest aRequest, final HttpServletResponse aResponse)
            throws HttpErrorException {
        final String id = iiif.getIdentifier();
        final int[] hwl = getMetadataWithCaching(id);
        final ImageInfo info = new ImageInfo(id, hwl[0], hwl[1], hwl[2]);
        ServletOutputStream outStream = null;
        try {
            outStream = aResponse.getOutputStream();

            if (iiif.getExtension().equals("xml")) {
                info.toStream(outStream);
            } else {
                final String server = getServer(aRequest); // needs to be the externally-accessible address

                // per IIIF spec, the prefix includes the contextPath already.
                final String prefix = iiif.getServicePrefix();

                info.addFormat("jpg"); // FIXME: Configurable options

                outStream.print(info.toJSON(server, prefix));
            }
        } catch (final JsonProcessingException e) {
            throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "couldn't make JSON", e);
        } catch (final IOException e) {
            throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "couldn't copy metadata to output", e);
        } finally {
            IOUtils.closeQuietly(outStream);
        }
    }

    protected void doImageRequest(final ImageRequest iiif, final HttpServletRequest aRequest, final HttpServletResponse aResponse)
            throws HttpErrorException {
        final String id = iiif.getIdentifier();
        final int[] hwl = getMetadataWithCaching(id); // of source image; already cached if user requested metadata
        final Region region = iiif.getRegion(); // refers to a region within source image, at native resolution
        final Size scale = iiif.getSize(); // refers to the size of tile requested, generated from Region, usually smaller.
        final float rotation = iiif.getRotation();
        int level = -1; // no level yet

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Request is handled via the IIIFRequest shim");
        }

        // validate some obvious basics
        if (region.getX() > hwl[1] || region.getY() > hwl[0]) {
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST, "region x/y coords exceed image size of "+hwl[1]+","+hwl[0]);
        }
        if (scale.getHeight() > TILE_SIZE || scale.getWidth() > TILE_SIZE) {
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST, "scaled dimension exceeds max of "+TILE_SIZE);
        }

        if (requireOsdStyle) {
            // Do this before normalization, because that un-uses certain features that we want to ban beforehand.
            validateOsdStyle(region, scale, rotation);
        }

        // get rid of stuff like percentages and scale==full, and force use of region==full if applicable.
        // Nice anyways, but mandatory before using levels.
        region.normalizeForImageDims(hwl[1], hwl[0]);
        scale.normalizeForRegionDims(region.getWidth(), region.getHeight());

        if (requireLevels) {
            level = findLevelFromRegion(hwl, region, scale);
        }
        // All good! Serve the image tile, ideally from cache
        String cachedFilename = serveImageWithCaching(id, level, region, scale, rotation, aRequest, aResponse);

        if (recentTiles != null && cachedFilename != null) {
            // cache the served filename
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("Adding served filename to recentTiles cache:\n{} -> {}", aRequest.getRequestURI(), cachedFilename);
            }
            recentTiles.put(aRequest.getRequestURI(),
                    new AbstractMap.SimpleImmutableEntry<Integer, String>(HttpServletResponse.SC_OK, cachedFilename));
        }
    }

    /**
     * Checks the given IIIF parameters to make sure they don't use any features or values that
     * OpenSeaDragon is known to never use.
     * @param region IIIF region
     * @param scale IIIF scale
     * @param rotation IIIF rotation
     * @throws info.freelibrary.djatoka.view.ImageServlet.HttpErrorException if something was invalid
     */
    private void validateOsdStyle(Region region, Size scale, float rotation) throws HttpErrorException {
        if (scale.isFullSize() || scale.isPercent()) {
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST, "may only use direct numeric scale specification");
        } else if ((scale.hasWidth() && scale.hasHeight()) || !scale.maintainsAspectRatio()) {
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST, "may not specify both scaled dimensions or use '!'");
        } else if (region.usesPercents()) {
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST, "region may not use percent");
        } else if (rotation != 0f) { // OSD rotates the HTML canvas instead
            throw new HttpErrorException(HttpServletResponse.SC_NOT_IMPLEMENTED, "rotation must be 0");
        }
    }

    /**
     * Computes the Djatoka zoom level that the given image size, region, and scale correspond to.
     * Validates all settings to make sure they correspond to valid combinations, like making
     * sure the region x,y coords start on an even multiple of the correct power of two, etc.
     * May modify the scale to make both its dimensions explicit if they weren't already.
     *
     * We bothered to encode our JP2s with these nifty levels. And the decode faster and at higher
     * quality. Let's use them!
     * @param hwl the height, width, and max level of the source image
     * @param region the region of interest within the source image
     * @param scale the scale to generate the output tile at
     * @return the svc.level to request from Djatoka, or -1 to indicate that a level-based request
     *   would be inappropriate (even though settings were otherwise valid)
     * @throws info.freelibrary.djatoka.view.ImageServlet.HttpErrorException if settings were invalid for using levels
     */
    private int findLevelFromRegion(final int[] hwl, final Region region, final Size scale)
            throws HttpErrorException {
        final int sh = scale.getHeight(); // with OpenSeaDragon, is always -1. Already guaranteed both are not -1.
        final int sw = scale.getWidth();
        final int x = region.getX(); // all Region fields already guaranteed positive if region!="full"
        final int y = region.getY();
        final int rh = region.getHeight();
        final int rw = region.getWidth();
        int level;

        // this requires that the scaled output tile size be standard.
        if (sw > TILE_SIZE || sh > TILE_SIZE) {
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST, "max tile size is " + TILE_SIZE);
        } else if (rw < hwl[1]-x && !isExactPowerOf2(rw)) {
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST,
                    "region width "+rw+" not a power of two and not limited by image edge");
        } else if (rh < hwl[0]-y && !isExactPowerOf2(rh)) {
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST,
                    "region height "+rh+" not a power of two and not limited by image edge");
        }

        // Find the side length of the region in the image being requested.
        int rs; // region square side length (if edges of image didn't interfere)
        int l; // sqrt(rs), which works like a psuedo-level. We convert to a real Djatoka "level" at the end.

        if (rw < hwl[1]-x) { // if region width isn't against the edge, it is the full square width
            rs=rw;
            l = log2(rs);
        } else if (rh < hwl[0]-y) {  // if region height isn't against the edge, it is the full square height
            rs=rh;
            l = log2(rs);
        } else if (sw > 0 && sw < TILE_SIZE) { // if scale width is less than TILE_SIZE, can extract rs from its value
            rs = TILE_SIZE*(hwl[1]-x)/sw; // sw = ceil[ TILE_SIZE * (width-x) / rs ]  => rs = floor[ TILE_SIZE * (width-x) / sw ]
            l = log2(rs) + (isExactPowerOf2(rs)? 0 : 1); // l = log2(rs), +1 if rs wasn't an even power of 2
            rs = 1<<l; // rs = 2^l
        } else if (sh > 0 && sh < TILE_SIZE) { // if scale height is less than TILE_SIZE, can extract rs from its value
            rs = TILE_SIZE*(hwl[0]-y)/sh; // sh = ceil[ TILE_SIZE * (height-y) / rs ]  => rs = floor[ TILE_SIZE * (height-y) / sh ]
            l = log2(rs) + (isExactPowerOf2(rs)? 0 : 1); // l = log2(rs), +1 if rs wasn't an even power of 2
            rs = 1<<l; // rs = 2^l
        } else { // no exact boundary--just use the first one bigger than will fit in given source region
            final int rbig = Math.max(rw, rh);
            l = log2(rbig) + (isExactPowerOf2(rbig)? 0 : 1); // l = log2(rs), +1 if rs wasn't an even power of 2
            rs = 1<<l; // rs = 2^l
        }

        // At this point, we have rs = 2^l.
        // In Djatoka-world, rs = TILESIZE * 2^(maxImageLevels -level) == 2^(maxImageLevels -level +log2(TILESIZE)). So solve for "level".
        level = hwl[2] + TILE_LOG2 - l;
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Level calculated: rs="+rs+", l="+l+", level="+level);
        }

        // Zoom levels < 1 are not legal in Djatoka, but they may still be requested for thumbnails or tiny screens.
        if (level < 1) {
            if (level >= minZoomLevel) {
                level = -1; // just do a standard level-less Region request instead, as long as the other conditions still hold.
            } else {
                throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST,
                        "region and scale correspond to zoom level "+level+" below allowed min of "+minZoomLevel);
            }
        }

        // calculate what both scale dimensions should be, even if they are given as -1 for default.
        final int explicitSh = Math.min(Math.round((float)(TILE_SIZE*(hwl[0]-y))/(float)rs),TILE_SIZE);
        final int explicitSw = Math.min(Math.round((float)(TILE_SIZE*(hwl[1]-x))/(float)rs),TILE_SIZE);

        // Validate that the request used standard power-if-two region and scale, so our level calculations were valid.
        // Ensures that no tiles are generated (and cached forever!) at odd dimensions that we didn't intend to serve up.
        if (level > hwl[2]) {
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST,
                    "region and scale correspond to zoom level "+level+" above this image's max of "+hwl[2]);
        } else if (x % rs != 0 || y % rs != 0) {
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST,
                    "region x and y coords "+x+","+y+" must fall evenly on boundary of "+rs+" when zoom level is"+level);
        } else if (rh != Math.min(hwl[0]-y, rs)) {
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST,
                    "region height "+rh+" should be "+Math.min(hwl[0]-y, rs)+" when region size is "+rs
                    +" and bottom edge is "+Integer.toString(hwl[0]-y)+" away");
        } else if (rw != Math.min(hwl[1]-x, rs)) {
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST,
                    "region width "+rw+" should be "+Math.min(hwl[1]-x, rs)+" when region size is "+rs
                     +" and right edge is "+Integer.toString(hwl[1]-x)+" away");
        } else if (sh != -1 && Math.abs(explicitSh - sh) > 1) { // rarely--only at level < 1—-OSD rounds up when should dn.
            final float raw = (float)(TILE_SIZE*(hwl[0]-y))/(float)rs;
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST,
                    "scaled height "+sh+" should be "+explicitSh+" when right edge is "+df.format(raw)
                    +" (~"+Math.round(raw)+" away after scaling)");
        } else if (sw != -1 && Math.abs(explicitSw - sw) > 1) {
            final float raw = (float)(TILE_SIZE*(hwl[1]-x))/(float)rs;
            throw new HttpErrorException(HttpServletResponse.SC_BAD_REQUEST,
                    "scaled width "+sw+" should be "+explicitSw+" when bottom edge is "+df.format(raw)
                    +" (~"+Math.round(raw)+" away after scaling)");
        }

        // make scale dimensions explicit -- it's required when using level (and overwrites minor OSD rounding flaws)
        scale.setExplicit(explicitSw, explicitSh);

        return level;
    }

    /**
     * Quick utility function to take log base 2 of a positive int.
     * @param n int to take log2 of
     * @return log2 of the int.
     */
    private static int log2(int n) {
        return 31 - Integer.numberOfLeadingZeros(n);
    }

    /**
     * Quick utility function to determine whether a positive int is an exact power of 2
     * @param n number to check
     * @return whether n is a power of 2
     */
    private static boolean isExactPowerOf2(int n) {
        return (n & (n-1)) == 0;
    }

    /**
     * Gets basic metadata for the names image, whether from a stored file or a live Djatoka request.
     * After calling, there will be a metadata.xml file in the image's tile cache directory to
     * speed things up next time.
     * If this has been called recently for this item, it doesn't even need the metadata.xml file;
     * it uses an in-memory cache for basically no work.
     * @param id the identifier of the image to look up
     * @return an array with height, width, and levels for the named image
     * @throws HttpErrorException if anything couldn't be looked up, read, or written
     */
    private int[] getMetadataWithCaching(final String id)
        throws HttpErrorException {

        // check for cached value
        int[] hwl;
        if (recentHWL.containsKey(id)) {
            return recentHWL.get(id);
        }

        PairtreeObject cacheObject;
        try {
            cacheObject = tileCache.getObject(id);
        } catch (IOException e) {
            throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Couldn't access tile cache", e);
        }
        final String filename = PairtreeUtils.encodeID(id);

        // check for existing metadata.xml, and either read it or fetch data and create it
        final File xmlFile = new File(cacheObject, filename + ".xml");
        if (xmlFile.exists() && xmlFile.length() > 0) {
            hwl = readMetadataFile(xmlFile);
        } else {
            //TODO: make property for whether to allow cache misses, for example when always pre-generating tiles
            hwl = fetchMetadata(id, internalServer);
            writeMetadataFile(xmlFile, hwl);
        }

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Returning height/width/levels: {}/{}/{}", hwl[0], hwl[1], hwl[2]);
        }

        recentHWL.put(id, hwl);
        return hwl;
    }

    /**
     * Makes a connection to the resolver servlet on this server and retrieves image height, width,
     * and levels.
     * @param id image identifier to ask about
     * @param serverName a name to access this server: may be internal or public, so long as it works.
     * @return an array with the three values
     * @throws HttpErrorException if couldn't connect and read values successfully
     */
    private int[] fetchMetadata(String id, String serverName) throws HttpErrorException {
        // Construct URL and query for the "resolver" servlet on this same server, but don't omit contextPath
        // because we'll be dispatching it externally to this webapp.
        URL url;
        try {
            url = new URL(serverName + contextPath + resolverPath
                          + StringUtils.format(RESOLVE_METADATA_QUERY, URLEncode.pathSafetyEncode(id)));
        } catch (MalformedURLException e) {
            throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Couldn't refer to resolver servlet", e);
        }

        // Retrieve and parse JSON
        // Ideally, I could just call the code directly, but the config and init setup for the
        //   Djatoka code isn't quite worth messing with.
        JsonNode json;
        HttpURLConnection conn = null;
        InputStream connIn = null;
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Querying image metadata: {}", url);
        }
        try {
            // get connection directly so we can better handle error status codes
            conn = (HttpURLConnection)url.openConnection();
            conn.setConnectTimeout(10000); // 10 sec == 10000 ms. Don't freeze forever if the resolver hangs somehow
            conn.setReadTimeout(10000);
            if (conn.getResponseCode()==404) {
                throw new HttpErrorException(HttpServletResponse.SC_NOT_FOUND, id+" not found");
            } else if (conn.getResponseCode() >= 400) {
                throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "error "+conn.getResponseCode()+" in resolver");
            } // if 30X code (redirect) or something, I guess it either works or it doesn't.

            connIn = conn.getInputStream();
            json = MAPPER.readTree(connIn); // read before closing input stream in finally{}
        } catch (IOException e) {
            throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Couldn't fetch image metadata", e);
        } finally {
            IOUtils.closeQuietly(connIn);
            if (conn != null) {
                conn.disconnect();
            }
        }
        return new int[] { json.get("height").asInt(), json.get("width").asInt(), json.get("levels").asInt() };
    }

    /**
     * Reads a metadata XML file for an image's height, width, and levels.
     * If values are missing or not integers, defaults to 0.
     * @param xmlFile file (matching template.xml) with the values. File must exist.
     * @return the three values in an array
     * @throws HttpErrorException if couldn't read the file
     */
    private int[] readMetadataFile(File xmlFile) throws HttpErrorException {
        int width = 0, height = 0, levels = 0; // default values

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Reading XML metadata file: " + xmlFile.getAbsolutePath());
        }

        Document xml;
        try {
            xml = new Builder().build(xmlFile);
        } catch (IOException e) {
            throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Couldn't read image metadata file", e);
        } catch (ParsingException e) {
            throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Invalid image metadata file", e);
        }
        final Element root = xml.getRootElement();
        final Element sElement = root.getFirstChildElement("Size");
        final String wString = sElement.getAttributeValue("Width");
        final String hString = sElement.getAttributeValue("Height");
        final Element lElement = root.getFirstChildElement("Levels");

        try {
            width = wString.equals("") ? 0 : Integer.parseInt(wString);
            height = hString.equals("") ? 0 : Integer.parseInt(hString);
            if (lElement != null) {
                    levels = Integer.parseInt(lElement.getValue());
            }
        } catch (final NumberFormatException details) {
            if (LOGGER.isWarnEnabled()) {
                LOGGER.warn("Stored height, width, or levels is not an integer. Got h/w/l={},{},{}",height, width, levels);
            }
        }

        return new int[] { height, width, levels };
    }

    /**
     * Takes an image's simple metadata and writes it to a file
     * @param xmlFile the metadata.xml file for an image to write to, patterned after a template
     * @param hwl the height, width, and levels of the image whose metadata.xml we're writing
     * @throws HttpErrorException if couldn't read the template or write the data
     */
    private void writeMetadataFile(File xmlFile, int[] hwl) throws HttpErrorException {
        InputStream inStream = null;
        OutputStream outStream = null;
        try {

            // input is template xml file
            Document templateXml;
            try {
                inStream = getServletContext().getResource(XML_TEMPLATE).openStream();
                templateXml = new Builder().build(inStream);
            } catch (IOException e) {
                throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Couldn't read template metadata", e);
            } catch (ParsingException e) {
                throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Invalid template metadata file", e);
            }

            // output is metadata.xml for image
            if (xmlFile.exists()) {
                // delete existing empty file
                if (LOGGER.isDebugEnabled()) {
                    LOGGER.debug("XML metadata file exists: {}", xmlFile);
                }
                if (!xmlFile.delete() && LOGGER.isWarnEnabled()) {
                    LOGGER.warn("File not deleted: {}", xmlFile);
                }
            }

            // populate the template with values from the retrieved JSON
            final Element root = templateXml.getRootElement();
            final Element sElement = root.getFirstChildElement("Size");
            final Attribute hAttribute = sElement.getAttribute("Height");
            final Attribute wAttribute = sElement.getAttribute("Width");
            final Element lElement = root.getFirstChildElement("Levels");

            hAttribute.setValue(Integer.toString(hwl[0]));
            wAttribute.setValue(Integer.toString(hwl[1]));
            lElement.appendChild(Integer.toString(hwl[2]));

            // copy from populated template (backed by inStream) to image's metatada file (backed by outStream)
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("Creating new xml metadata file: " + xmlFile.getAbsolutePath());
            }
            try {
                outStream = new FileOutputStream(xmlFile);
                final Serializer serializer = new Serializer(outStream);
                serializer.write(templateXml);
                serializer.flush();
            } catch (IOException e) {
                throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Couldn't write image metadata", e);
            }
        } finally {
            IOUtils.closeQuietly(outStream);
            IOUtils.closeQuietly(inStream);
        }
    }

    /**
     * Serves an image with requested params. Uses a tile in the tilecache already if possible.
     * Otherwise, forward the request to Djatoka OpenURL to make and serve the tile, then move
     * Djatoka's generated image file from its cache into our tilecache for next time.
     *
     * @param aID identifier of image
     * @param aLevel level of sample region
     * @param aRegion sample region
     * @param aScale scale/size of output tile
     * @param aRotation rotation of output tile
     * @param aRequest HTTP request being fulfilled
     * @param aResponse HTTP response to serve on
     * @return the filename of a locally cached copy of the image, or null
     * @throws info.freelibrary.djatoka.view.ImageServlet.HttpErrorException if couldn't read tilecache or dispatch request to OpenURL successfully
     */
    private String serveImageWithCaching(final String aID, final int aLevel, final Region aRegion, final Size aScale,
                                         final float aRotation, final HttpServletRequest aRequest, final HttpServletResponse aResponse)
            throws HttpErrorException {
        PairtreeObject cacheObject;
        try {
            cacheObject = tileCache.getObject(aID);
        } catch (IOException e) {
            throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Couldn't access tile cache", e);
        }
        final String fileName = CacheUtils.getFileName(aLevel, aRegion, aScale, aRotation);
        final File imageFile = new File(cacheObject, fileName);

        if (imageFile.exists()) {
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("{} serving from Pairtree cache", imageFile);
            }

            serveJpgFile(imageFile.getAbsolutePath(), aResponse);
            return imageFile.getAbsolutePath();
        } else {
            //TODO: make property for whether to allow cache misses, for example when always pre-generating tiles
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("{} not found in cache", imageFile);
            }

            serveNewImage(aID, aLevel, aRegion, aScale, aRotation, aRequest, aResponse);
            return cacheNewImage(aRequest, aID + "_" + fileName, imageFile);
        }
    }

    /**
     * Serve a JPEG file's contents, given its full path
     * @param imagePath path to a JPG image file. File must exist!
     * @param aResponse response to serve the bits on
     * @throws HttpErrorException if couldn't serve file
     */
    private void serveJpgFile(final String imagePath, final HttpServletResponse aResponse) throws HttpErrorException {
        final File imageFile = new File(imagePath);
        ServletOutputStream outStream = null;
        try {
            outStream = aResponse.getOutputStream();

            aResponse.setHeader("Content-Length", "" + imageFile.length());
            aResponse.setHeader("Cache-Control", "public, max-age=4838400"); // note: when Djatoka serves, it doesn't include this one!
            aResponse.setContentType("image/jpg");

            IOUtils.copyStream(imageFile, outStream);
        } catch (IOException e) {
            throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Couldn't send image", e);
        } finally {
            IOUtils.closeQuietly(outStream);
        }
    }

    /**
     * Builds the correct query string and dispatches to the OpenURL/Djatoka system to fetch, adjust, and serve
     * the image. As a side effect, the Djatoka system stores its cached file's filename in the session object.
     * @param aID identifier of image
     * @param aLevel level of sample region
     * @param aRegion sample region
     * @param aScale scale/size of output tile
     * @param aRotation rotation of output tile
     * @param aRequest HTTP request being fulfilled
     * @param aResponse HTTP response to serve on
     * @throws info.freelibrary.djatoka.view.ImageServlet.HttpErrorException if couldn't dispatch request to OpenURL successfully
     */
    private void serveNewImage(final String aID, final int aLevel, final Region aRegion, final Size aScale,
                                      final float aRotation, final HttpServletRequest aRequest, final HttpServletResponse aResponse)
            throws HttpErrorException {
        final String safeID = URLEncode.pathSafetyEncode(aID);
        RequestDispatcher dispatcher;
        String[] values;
        String url;

        // Cast floats as integers because that's what djatoka expects
        // Construct URLs without contextPath because we'll be dispatching them *within* this webapp.
        if (aLevel > 0) {
            values = new String[] { safeID, DEFAULT_VIEW_FORMAT, String.valueOf(aLevel), Integer.toString((int) aRotation),
                    aRegion.toDjatokaString(aLevel, aScale) };
            url = resolverPath +StringUtils.format(RESOLVE_IMAGE_QUERY, values);
        } else {
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("Image requested with no level specified: id={} region={} scale={}", aID, aRegion, aScale);
            }
            values = new String[] { safeID, DEFAULT_VIEW_FORMAT, aRegion.toDjatokaString(aLevel, aScale), aScale.toDjatokaString(),
                    Integer.toString((int) aRotation) };
            url = resolverPath +StringUtils.format(RESOLVE_REGION_QUERY, values);
        }

        // Right now we just let the OpenURL interface do the work
        dispatcher = aRequest.getRequestDispatcher(url);

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Image requested: {} - {}", aID, url);
        }

        try {
            dispatcher.forward(aRequest, aResponse);
        } catch (IOException e) {
            throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Couldn't dispatch to resolver", e);
        } catch (ServletException e) {
            throw new HttpErrorException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Couldn't dispatch to resolver", e);
        }
    }

    /**
     * For an image that was just served by the OpenURL/Djatoka system, move its file from their cache to ours.
     * @param aRequest the incoming image request that Djatoka just fulfilled
     * @param aKey the image ID + underscore + and the combined display parameters, which match what Djatoka just served.
     * @param aDestFile the destination file in the tile cache PairTree to which to move the served image tile.
     * @return the filename of a locally cached copy of the image, or null
     */
    private String cacheNewImage(final HttpServletRequest aRequest, final String aKey, final File aDestFile) {
        final HttpSession session = aRequest.getSession();
        // path to temp file that the djatoka code saved in its temp cache (not the freelib tile cache!)
        final String fileName = (String) session.getAttribute(aKey);

        if (fileName != null) {
            // name by which to reference the cached file when talking to OpenURL code
            final String cacheName = (String) session.getAttribute(fileName);
            final File cachedFile = new File(fileName);

            // This moves the newly created file from the adore-djatoka cache
            // to the freelib-djatoka tile cache (which is pure-FS/Pairtree-based)
            if (cachedFile.exists() && aDestFile != null) {
                if (LOGGER.isDebugEnabled()) {
                    LOGGER.debug("Renaming cache file from {} to {}", cachedFile, aDestFile);
                }

                if (!cachedFile.renameTo(aDestFile) && LOGGER.isDebugEnabled()) {
                    LOGGER.debug("Unable to move cache file: {}", cachedFile);
                } else {
                    // This is the temp file cache used by the OpenURL layer
                    if (!OpenURLJP2KService.removeFromTileCache(cacheName) && LOGGER.isDebugEnabled()) {
                        LOGGER.debug("Unable to remove OpenURL cache file link: {}", fileName);
                    } else {
                        session.removeAttribute(aKey);
                        session.removeAttribute(fileName);
                        return aDestFile.getAbsolutePath();
                    }
                }
            } else if (LOGGER.isWarnEnabled() && !cachedFile.exists()) {
                LOGGER.warn("Session had a cache file ({}), but it didn't exist", cachedFile.getAbsoluteFile());
            } else if (LOGGER.isWarnEnabled()) {
                LOGGER.warn("Location for destination cache file was null");
            }
        } else if (LOGGER.isWarnEnabled()) {
            // If you're wondering why you found your way to this error, it's because something in the Djatoka code
            // had an error. Maybe try turning on debug logging for gov.lanl.* or finding out what URL was
            // dispatched to and loading it directly yourself to see what it reports.
            LOGGER.warn("Couldn't cache ({} = {}); session lacked new image information", aKey, aDestFile
                    .getAbsolutePath());
        }
        return null;
    }

    /**
     * Returns a URL to the root of the server that a request was sent to
     * @param aRequest incoming request
     * @return externally visible address of the server, with explicit port number
     */
    private String getServer(final HttpServletRequest aRequest) {
        final StringBuilder server = new StringBuilder();
        server.append(aRequest.getScheme()).append("://");
        server.append(aRequest.getServerName()).append(":");
        server.append(aRequest.getServerPort());
        return server.toString();
    }

    /**
     * Small utility class to override one method in LinkedHashMap, and make sure the right
     * initializer params get called. This allows it to be used as an LRU cache.
     * @param <K>Key type
     * @param <V>Value type
     */
    private static class LruCache<K,V> extends LinkedHashMap<K,V> {
        private final int maxEntries;
        public LruCache(final int maxEntries) {
            super(maxEntries + 1,0.75f, true);
            this.maxEntries = maxEntries;
        }
        @Override
        protected boolean removeEldestEntry(final Map.Entry<K,V> eldest) {
            return super.size() > maxEntries;
        }
    }

    /**
     * Like a regular Exception, except for two things:
     * 1) it has a different type, and
     * 2) in addition to wrapping a message, it also wraps an HTTP response code.
     * Thrown when an error page, with the indication response code and message, needs to be served.
     */
    private static class HttpErrorException extends Exception {
        private int code; // an HTTPServletResponse.SC_* code
        public HttpErrorException(int c, String message) {
            super(message);
            code = c;
        }
        public HttpErrorException(int c, String message, Exception parent) {
            super(message, parent);
            code = c;
        }
        public int getCode() {
            return code;
        }
        public Map.Entry<Integer, String> getPair() {
            return new AbstractMap.SimpleImmutableEntry<Integer, String>(code, getMessage());
        }
    }
}
